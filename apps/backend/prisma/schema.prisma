// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pgcrypto, citext, uuid_ossp]
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id             String    @id @default(uuid()) @db.Uuid
  email          String    @unique @db.Citext
  name           String?
  password       String
  role           UserRole  @default(USER)
  emailVerified  Boolean   @default(false)
  lastLoginAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  refreshTokens  RefreshToken[]
  sessions       Session[]
  
  @@map("users")
}

model RefreshToken {
  id           String   @id @default(uuid()) @db.Uuid
  token        String   @unique
  userId       String   @db.Uuid
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([userId])
  @@map("refresh_tokens")
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @db.Uuid
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userAgent    String?
  ipAddress    String?
  lastActivityAt DateTime @default(now())
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([userId])
  @@map("sessions")
}